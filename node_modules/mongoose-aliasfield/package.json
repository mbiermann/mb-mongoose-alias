{
  "name": "mongoose-aliasfield",
  "description": "Field alias support for mongoose",
  "version": "0.0.2",
  "author": {
    "name": "Fabrizio Ruggeri"
  },
  "devDependencies": {
    "vows": "0.5.13",
    "mongoose": ">=2.0.0"
  },
  "keywords": [
    "mongoose",
    "mongo",
    "mongodb",
    "alias",
    "field"
  ],
  "engines": {
    "node": ">=0.4.0"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/ramiel/Alias-Field-Mongoose-plugin.git"
  },
  "readme": "mongoose-aliasfield\n===================\n\nThis plugin let you add a `alias` key to your schema and create getter and setter for your field using that alternate name.\n\nPlugin is intended to write short-keys for you documents on the DB but let you use long, descriptive name when reading fetched documents.\nThis will result in less storage needed to memorize your data having no need to remember short key meanings.\n\n## Schema Example\n\nTake this schema as example:\n\n```javascript\nvar mongoose = require('mongoose');\nvar fieldsAliasPlugin = require('mongoose-aliasfield');\n\n/*Describe a Schema*/\nvar PersonSchema = new Schema({\n\t't' : {'type': Date, 'index': true, 'alias': 'timestamp'},\n\t'n' : {'type' : String, 'alias': 'name'},\n\t's' : {'type' : String, 'alias': 'surname'},\n\t'p' : {\n\t\t'a' : {'type' : String, 'alias': 'profile.address'},\n\t\t'pn': {'type' : String, 'alias': 'profile.phone_number'}\n\t}\n});\n\n/*Add field alias plugin*/\nPersonSchema.plugin(fieldsAliasPlugin);\n\n/*Person will be the model*/\n```\n\nNow that your `schema` is created you can use alias field name to describe an instance of your model\n\n```javascript\nvar person = new Person({\n\t'timestamp'\t: new Date(),\n\t'name'\t\t: 'Jhon',\n\t'surname'\t: 'Doe',\n\t'profile.address': 'Rue de Morgane',\n\t'profile.phone_number': '051-123456 78',\n});\n\nperson.save();\n\n```\n\nEven getters will run out of the box\n\n```javascript\nvar full_name = person.name+' '+person.surname;\n```\n\n`full_name` will be `Jhon Doe`\n\nThe only limitation in setters and getters is that you can't use partial path for nested properties\n\n```javascript\n/*THIS WON'T ACT AS EXPECTED!*/\nvar user_profile = person.profile;\n```\n\nYou'll be able to obtain even an aliased description of object as i the example below\n\n```\nPerson.find({'name': 'Jhon'}, function(err,people){\n\tconsole.log( people.toAliasedFieldsObject() );\n});\n\n```\nYour models gain a method called `toAliasedFieldsObject` which return a long-descriptive version of your docs:\n\n```javascript\n{\n\t'name'\t: 'Jhon',\n\t'surname': 'Doe',\n\t'profile': {\n\t\t'address' \t\t: 'Rue de Morgane',\n\t\t'phone_number'\t: '051-123456 78'\n\t}\n}\n```\n\n## Author\n\nFabrizio 'ramiel' Ruggeri",
  "_id": "mongoose-aliasfield@0.0.2",
  "_from": "mongoose-aliasfield@0.0.2"
}
